<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://www.cpdis.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.cpdis.com/" rel="alternate" type="text/html" /><updated>2018-01-27T10:50:00-06:00</updated><id>https://www.cpdis.com/</id><title type="html">Colin Dismuke</title><subtitle>A blog about AI, cryptoassets, and running.</subtitle><entry><title type="html">Setting up my Machine Learning Environment</title><link href="https://www.cpdis.com/Setting-up-my-Machine-Learning-Environment/" rel="alternate" type="text/html" title="Setting up my Machine Learning Environment" /><published>2018-01-27T10:47:39-06:00</published><updated>2018-01-27T10:47:39-06:00</updated><id>https://www.cpdis.com/Setting-up-my-Machine-Learning-Environment</id><content type="html" xml:base="https://www.cpdis.com/Setting-up-my-Machine-Learning-Environment/">&lt;p&gt;As I mentioned in my last post, I unfortunately lost my machine learning environment that I had set up on my laptop. Fortunately, though, getting up and running with Python, Keras, and Tensorflow is quite easy. All of the individual packages that you might want to use for machine/deep learning can be downloaded, cloned, acquired individually but it seems like the standard (and easiest for beginners) method is to use a distribution like &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anaconda is a leading open data science platform that’s powered by Python. I’ll be using the open source version but there’s also an &lt;a href=&quot;https://www.anaconda.com/enterprise/&quot;&gt;enterprise&lt;/a&gt; distribution as well. The major benefit of using a distribution is that out of the box it includes over 100 (read &lt;em&gt;most&lt;/em&gt;) of the most popular Python and R packages for data science.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-conda-environment&quot;&gt;Creating a conda environment&lt;/h2&gt;
&lt;p&gt;Also included with Anaconda is a versatile package manager call &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt;. Like &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, it quickly installs, runs, and updates packages and their dependencies. You can also use it to search the package index, create new environments (the main point of this post), and install packages into existing environments.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; environments are collections of packages with specific versions that can be used to ensure the portability of Python code. This is useful when collaborating with someone or using two different versions of a package simultaneously. I created two machine learning environments, &lt;code class=&quot;highlighter-rouge&quot;&gt;ML2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ML3&lt;/code&gt;. Based off of Python 2.7.14 and 3.6.4, respectively. It only took a few simple steps to create both of these environments.&lt;/p&gt;

&lt;p&gt;In Terminal type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create -n ML2 python=2.7.14 pandas scikit-learn jupyter matplotlib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;. When prompted, answer &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and you should see this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# To activate this environment, use:
# &amp;gt; source activate ML2
#
# To deactivate this environment, use:
# &amp;gt; source deactivate ML2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Activating the environment is as simple as typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source activate ML2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that the environment is activated because the name &lt;code class=&quot;highlighter-rouge&quot;&gt;(ML2)&lt;/code&gt; is prepended to your prompt.&lt;/p&gt;

&lt;h2 id=&quot;install-tensorflow-and-keras&quot;&gt;Install Tensorflow and Keras&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; is an open source software library for numerical computation using data flow graphs. The way that it is built allows it to be used on one or more CPUs, GPUs, servers, or phones with a single API. It was originally developed by researchers and engineers on the Google Brain Team.&lt;/p&gt;

&lt;p&gt;To install TensorFlow, make sure the environment you want to use is active, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;ML2&lt;/code&gt; and type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other super useful package is &lt;a href=&quot;https://keras.io/&quot;&gt;Keras&lt;/a&gt;, a high-level neural network specification implemented in Python that runs on top of TensorFlow. It makes creating a model much simpler than using TensorFlow which is paramount for fast experimentation.&lt;/p&gt;

&lt;p&gt;To install Keras, make sure the environment you want to use is active, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;ML2&lt;/code&gt; and type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install keras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test-it&quot;&gt;Test it!&lt;/h2&gt;

&lt;p&gt;To make sure everything is running smoothly type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ipython
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will bring up the iPython console and display:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Python 2.7.13 |Continuum Analytics, Inc.| (default, Dec 20 2016, 23:05:08) 
Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.

IPython 5.3.0 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object', use 'object??' for extra details. details.

In [1]:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Import TensorFlow and Keras:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow, keras
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should result in the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Using TensorFlow backend.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These aren’t the only tools that I’ll be using but they are a solid base. Distributions such as Anaconda and package managers like conda, pip, and homebrew make adding new tools extremely easy.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="machine learning" /><category term="Anaconda" /><category term="tensorflow" /><category term="keras" /><category term="yearofML" /><summary type="html">As I mentioned in my last post, I unfortunately lost my machine learning environment that I had set up on my laptop. Fortunately, though, getting up and running with Python, Keras, and Tensorflow is quite easy. All of the individual packages that you might want to use for machine/deep learning can be downloaded, cloned, acquired individually but it seems like the standard (and easiest for beginners) method is to use a distribution like Anaconda.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry><entry><title type="html">Lost Environment and FloyHub</title><link href="https://www.cpdis.com/Lost-Environment-and-FloydHub/" rel="alternate" type="text/html" title="Lost Environment and FloyHub" /><published>2018-01-24T15:32:35-06:00</published><updated>2018-01-24T15:32:35-06:00</updated><id>https://www.cpdis.com/Lost-Environment-and-FloydHub</id><content type="html" xml:base="https://www.cpdis.com/Lost-Environment-and-FloydHub/">&lt;p&gt;It turns out that at some point in the past few months the environment that I had setup for machine learning (&lt;a href=&quot;https://www.tensorflow.org&quot;&gt;Tensorflow&lt;/a&gt;, &lt;a href=&quot;https://keras.io&quot;&gt;Keras&lt;/a&gt;, &lt;a href=&quot;http://opencv-python-tutroals.readthedocs.io/en/latest/&quot;&gt;OpenCV&lt;/a&gt;, etc.) was somehow lost in the ether.&lt;/p&gt;

&lt;p&gt;How could this happen you might ask? I used &lt;a href=&quot;https://www.anaconda.com&quot;&gt;Anaconda&lt;/a&gt; to manage the different environments I had (&lt;code class=&quot;highlighter-rouge&quot;&gt;source activate myenv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;source deactivate myenv&lt;/code&gt;) and I recently did a clean install of Python to clear up some issues I was having with regard to &lt;a href=&quot;https://www.udacity.com/course/self-driving-car-engineer-nanodegree--nd013&quot;&gt;Udacity’s Self Driving Car Nanodegree&lt;/a&gt;. Because of this, when I went to start on the project for this week, &lt;a href=&quot;https://medium.com/@ageitgey/how-to-break-a-captcha-system-in-15-minutes-with-machine-learning-dbebb035a710&quot;&gt;Breaking a CAPTCHA in 15 minutes&lt;/a&gt;, I realized that none of the packages I had previously installed were there. Not good. Fortunately, I like starting things from scratch and this gives me the opportunity to write a post about the way that I setup my environment.&lt;/p&gt;

&lt;p&gt;While I was researching how different people have set up their machine learning environments I came across FloydHub. FloydHub is one of the newish class of platform-as-a-service (PaaS) services. They basically allow you to train and deploy deep learning models in the cloud with just a few commands and parameters on the command line. Most of the popular frameworks are available (&lt;code class=&quot;highlighter-rouge&quot;&gt;floyd run --env tensorflow&lt;/code&gt;) and a range of hardware is available at relatively affordable prices at per second rates.&lt;/p&gt;

&lt;p&gt;One of the highlights of FloydHub (setting aside making the whole process almost frictionless) is the ability to create a Jupyter notebook for the project when you’re starting your model. Follow along and see how easy it is to get a model running:&lt;/p&gt;

&lt;h3 id=&quot;1-create-a-floydhub-account&quot;&gt;1. Create a FloydHub account&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.floydhub.com/signup&quot;&gt;Sign up&lt;/a&gt; on FloydHub&lt;/li&gt;
  &lt;li&gt;Install the floyd CLI on your local machine through these two &lt;a href=&quot;https://www.floydhub.com/welcome&quot;&gt;steps&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install -U floyd-cli

$ floyd login
# Follow the instructions on your CLI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upon logging in, you will need to copy and paste a private key into the command line that authenticates your machine with the service. FloydHub provides a nice UX for copying that 🔑 during the account creation process—it’s the little things that make you like a product.&lt;/p&gt;

&lt;h3 id=&quot;2-clone-this-project-to-your-local-machine&quot;&gt;2. Clone this project to your local machine&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /path/to/your-project-dir
$ floyd clone experiments/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-create-your-project-version-on-floydhub&quot;&gt;3. Create your project version on FloydHub&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.floydhub.com/projects/create&quot;&gt;Create a project&lt;/a&gt; on FloydHub and then sync the cloned repository with your new project:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ floyd init your-project-name&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-run-the-project-through-a-jupyter-notebook&quot;&gt;4. Run the project through a jupyter notebook&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--env&lt;/code&gt; flag specifies the environment that this project should run on.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--data&lt;/code&gt; flag specifies the dataset that should be available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; directory and the models should be available at the &lt;code class=&quot;highlighter-rouge&quot;&gt;/models&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--mode&lt;/code&gt; flag specifies that the job should create a Jupyter notebook.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--gpu&lt;/code&gt; flag specifies whether the GPU should be used to accelerate the training process.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;floyd run \
  --env tensorflow:py2 \
  --data experiments/datasets/🐶/2:data \
  --data experiments/datasets/🐶-models/1:models \
  --mode jupyter \
  --gpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the job is started, the jupyter notebook will open in your browser and you are ready to go!&lt;/p&gt;

&lt;p&gt;The next post will be about setting up my machine learning environment followed by the project that I was tentatively supposed to be finished with a few days ago.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="python" /><category term="anaconda" /><category term="floydhub" /><category term="yearofml" /><summary type="html">It turns out that at some point in the past few months the environment that I had setup for machine learning (Tensorflow, Keras, OpenCV, etc.) was somehow lost in the ether.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry><entry><title type="html">PathNet - Evolution Channels Gradient Descent in Super Neural Networks</title><link href="https://www.cpdis.com/PathNet-A-Evolution-Channels-Gradient-Descent-in-Super-Neural-Networks/" rel="alternate" type="text/html" title="PathNet - Evolution Channels Gradient Descent in Super Neural Networks" /><published>2018-01-17T13:40:10-06:00</published><updated>2018-01-17T13:40:10-06:00</updated><id>https://www.cpdis.com/PathNet-A-Evolution-Channels-Gradient-Descent-in-Super-Neural-Networks</id><content type="html" xml:base="https://www.cpdis.com/PathNet-A-Evolution-Channels-Gradient-Descent-in-Super-Neural-Networks/">&lt;p&gt;&lt;em&gt;Note: Inevitably, this past week was much more busy than planned. As such, I didn’t get to explore much more than the paper itself and the Github repository. I’d rather not do the minimum amount of work to achieve a goal but in this case it’s the best I can do.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I first came across PathNet in Azeem Azhar’s essential &lt;a href=&quot;https://www.getrevue.co/profile/azeem?utm_campaign=Issue&amp;amp;utm_content=forwarded&amp;amp;utm_medium=email&amp;amp;utm_source=Azeem+Azhar%3A+The+Exponential+View&quot;&gt;The Exponential View&lt;/a&gt; newsletter almost exactly a year ago. DeepMind was causing a stir in the AI community because PathNet was a plausible precursor to an architecture that could support artificial general intelligence (AGI). PathNet combines modular deep learning, meta-learning, and reinforcement learning and is summarized this way in the introduction to the &lt;a href=&quot;https://arxiv.org/abs/1701.08734&quot;&gt;paper&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For artificial general intelligence (AGI) it would be efficient if multiple users trained the same giant neural network, permitting parameter reuse, without catastrophic forgetting. PathNet is a first step in this direction. It is a neural network algorithm that uses agents embedded in the neural network whose task is to discover which parts of the network to re-use for new tasks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neural networks, in general, are trained on data for each specific task they are trying to achieve. This is time consuming and not efficient. Transfer learning was developed to bypass this problem but has limited use. PathNet goes beyond transfer learning, where knowledge gained while solving one problem is applied to a different but related problem, it finds the best parameters to be reused for transfer learning and implements those. Essentially, a neural network of neural networks.&lt;/p&gt;

&lt;p&gt;A PathNet is a modular deep neural network with any number of layers consisting of modules. Each module within each layer is itself a neural network (see last sentence of the previous paragraph). Each neural network module is either convolutional or linear and is followed by a transfer function (RELUs in this case). At each layer the output of each module is summed and then passed on to the next layer. While there may be an arbitrary number of modules per layer, typically a maximum of 3 or 4 distinct modules are permitted in the final pathway. The final layer in a PathNet is unique and not shared between different tasks. The figure belows shows this model in action. The first three layers are convolutional 2D kernels with 8 kernels per module (the green boxes in the figure), kernel sizes of (8, 4, 3), and strides (4, 2, 1) from the first to the third layer, respectively. After each module is a RELU and the layers are summed before being passed on to the next layer (light blue boxes). The red boxes show the modules that are passed on to the next layer, if all modules were included then as the model evolved it would simply grow to encompass the entire network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/16-01-18/atari.jpeg&quot; alt=&quot;Atari&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tasks that were considered were MNIST classification, CIFAR and SVHN, several Atari games, and several Labyrinth games. For binary MNIST classification the researchers found that PathNet helped speed up learning in the classification task by decreasing the mean time to solution from 229 generations to 167 generations. They found this to be the case for both the control (independent learning) and when the hyperparameters were fine tuned. The speedup ratio compared to independent learning was 1.18. The histograms below clearly show the reduction in the number of generations to achieve 0.998 accuracy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/16-01-18/MNIST.jpeg&quot; alt=&quot;MNIST&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Moving on to the Atari games, the researchers found that PathNet was superior to fine-tuning. fine-tuning was performed by doing a hyperparameter sweep of learning rates and entropy costs while PathNet was investigated using a range of evaluation times, mutation rates, and tournament sizes. [I understand that it’s necessary to tune the model to achieve optimal results, however, if you must tune PathNet doesn’t that make it a little less viable as AGI?] An optimal combination of tournament size and mutation rate were found for PathNet that achieved rapid convergence and a speedup ratio of 1.33 versus 1.16 for fine-tuning. The figure below shows the results for the first 40 million steps of training for PathNet (blue), fine-tuning (green), and independent learning (red). The results for both PathNet and fine-tuning show the top five hyperparameter settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/16-01-18/atari2.jpeg&quot; alt=&quot;Atari2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, three labyrinth games were tested, &lt;code class=&quot;highlighter-rouge&quot;&gt;lt_chasm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;seekavoid_arena&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;stairway_to_melon&lt;/code&gt;. All of the games are part of DeepMind’s &lt;a href=&quot;https://github.com/deepmind/lab&quot;&gt;DeepMind Lab&lt;/a&gt;. Again, a hyperparameter sweep was used for fine-tuning; mutation rates, module duplication rates, and tournament size were varied while learning rate, entropy cost, and evaluation time were fixed. PathNet learns the second task faster than fine tuning for transfer to &lt;code class=&quot;highlighter-rouge&quot;&gt;lt_chasm&lt;/code&gt; and transfer from &lt;code class=&quot;highlighter-rouge&quot;&gt;lt_chasm&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;seekavoid_arena&lt;/code&gt;. PathNet also performs better when learning &lt;code class=&quot;highlighter-rouge&quot;&gt;stairway_to_melon&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;seekavoid_arena&lt;/code&gt; from scratch. Interestingly, when transferring to &lt;code class=&quot;highlighter-rouge&quot;&gt;lt_chasm&lt;/code&gt;, both fine tuning and PathNet perform worse than independent learning. Speedup for PathNet is 1.26 versus 1.0 for fine-tuning (this is skewed by the good performance of transferring from &lt;code class=&quot;highlighter-rouge&quot;&gt;seekavoid_arena&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;stairway_to_melon&lt;/code&gt;). The figure below shows the mean of the five best training runes for PathNet compared with fine-tuning (the off diagonal plots) and independent learning (diagonal plots labeled from scratch). The results are more mixed than the previous examples, however, in most cases PathNet performs better than the control. especially when transferring from one game to another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/16-01-18/labyrinth.jpeg&quot; alt=&quot;Labyrinth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s pretty clear that PathNet represents a step toward AGI. I wish that I had more time to look at the &lt;a href=&quot;https://github.com/jaesik817/pathnet&quot;&gt;code&lt;/a&gt;, play with it, and see it in action with some of the examples from the paper but I’m unfortunately already behind with this project.&lt;/p&gt;

&lt;p&gt;The code, notes, and reference files for this week are in this &lt;a href=&quot;https://github.com/cpdis/Experiments/tree/master/1_DeepMind_PathNet&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="transfer learning" /><category term="evolution learning" /><category term="continual learning" /><category term="giant networks" /><category term="yearofml" /><summary type="html">Note: Inevitably, this past week was much more busy than planned. As such, I didn’t get to explore much more than the paper itself and the Github repository. I’d rather not do the minimum amount of work to achieve a goal but in this case it’s the best I can do.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry><entry><title type="html">Folder Structure and Workflow</title><link href="https://www.cpdis.com/Folder-Structure-and-Workflow/" rel="alternate" type="text/html" title="Folder Structure and Workflow" /><published>2018-01-08T22:00:18-06:00</published><updated>2018-01-08T22:00:18-06:00</updated><id>https://www.cpdis.com/Folder-Structure-and-Workflow</id><content type="html" xml:base="https://www.cpdis.com/Folder-Structure-and-Workflow/">&lt;p&gt;There are two categories of projects that I’ve collected: ML papers and tutorials/working examples. For both of these I want a consistent workflow that allows me to present summaries in an quick and efficient manner and to reference in the future.&lt;/p&gt;

&lt;h2 id=&quot;papers&quot;&gt;Papers&lt;/h2&gt;
&lt;p&gt;I think that I have come up with a decent template for presenting a summary of each of the papers that I read as well as describe how they might be useful. There will be four sections: &lt;em&gt;Summary&lt;/em&gt;, &lt;em&gt;Notes&lt;/em&gt;, &lt;em&gt;Research Method&lt;/em&gt;, and &lt;em&gt;Resources&lt;/em&gt;. The &lt;em&gt;Summary&lt;/em&gt; section will include a brief summary in my own words along with a concise summary quote from the paper itself. The &lt;em&gt;Notes&lt;/em&gt; section is pretty self explanatory but I will try to make it verbose enough that it can stand on its own. The &lt;em&gt;Research Method&lt;/em&gt; section will follow this format:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the introduction and summarize.&lt;/li&gt;
  &lt;li&gt;Identify the big question or hypothesis.&lt;/li&gt;
  &lt;li&gt;Summarize the background in five sentences or less.&lt;/li&gt;
  &lt;li&gt;Identify specific questions.&lt;/li&gt;
  &lt;li&gt;Identify the approach.&lt;/li&gt;
  &lt;li&gt;Read the Methods section and diagram the experiment (this will vary widely based on the paper).&lt;/li&gt;
  &lt;li&gt;Summarize the findings of each result.&lt;/li&gt;
  &lt;li&gt;Do the results answer the specific questions asked above?&lt;/li&gt;
  &lt;li&gt;Read the conclusion and summarize.&lt;/li&gt;
  &lt;li&gt;What are others saying about this paper?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, the &lt;em&gt;Resources&lt;/em&gt; section will link to any additional information about the paper such as code repositories, datasets, subsequent papers, and projects based on the results of the paper.&lt;/p&gt;

&lt;h2 id=&quot;tutorials-and-other-code-based-projects&quot;&gt;Tutorials and other code based projects&lt;/h2&gt;
&lt;p&gt;My goal when working through tutorials or trying to reproduce models is to have a consistent and efficient workflow that makes it simple to replicate across projects. An efficient workflow makes it easier to understand the scope of the project and return to it at a later. At work, despite our best intentions and templated folder structure, our projects inevitably end up as a labyrinth of cryptically named folders full of unlabeled data and results. I hope that starting this project with a carefully considered organizational philosophy will help in the weeks and months to come. A few requirements that went into building my final workflow:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always use version control.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is important because it makes it easier to work from multiple computers (and iPads), makes it easier to share and collaborate with others, and makes it easier to replicate results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Separate code from data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is especially important in machine learning projects since datasets can be very, very large. In addition, it makes it easier to swap between datasets and share code with others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Separate raw, working, and processed data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think it’s useful to separate data into a few different sources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Raw&lt;/strong&gt; data is the original, immutable data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interim&lt;/strong&gt; data is the working data that is being transformed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Processed&lt;/strong&gt; data is the final dataset being used for modeling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External&lt;/strong&gt; data is from third party sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organizing the data this way allows you to know when you can safely delete and move files.&lt;/p&gt;

&lt;p&gt;Given those requirements I went about building my folder structure and workflow. Quickly, though, it dawned on me that there are thousands of teams and tens of thousands of practitioners working on real, in-production problems that have most likely optimized their workflows for maximum efficiency. With that, I went in search of the perfect folder structure and research workflow. While I’m pretty sure I didn’t find exactly that, I found something that fits all the requirements above and is automated as well.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://drivendata.github.io/cookiecutter-data-science/&quot;&gt;Cookiecutter Data Science&lt;/a&gt;  project structure is &lt;em&gt;a logical, reasonably standardized, but flexible project structure for doing and sharing data science work.&lt;/em&gt; Cookiecutter Data Science is built on &lt;a href=&quot;http://cookiecutter.readthedocs.io/en/latest/readme.html&quot;&gt;Cookiecutter&lt;/a&gt; which is a command-line utility that creates projects from templates (cookiecutters). The creators of Cookiecutter Data Science summarize it like this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;When we think about data analysis, we often think just about the resulting reports, insights, or visualizations. While these end products are generally the main event, it’s easy to focus on making the products &lt;em&gt;look nice&lt;/em&gt; and ignore the &lt;em&gt;quality of the code that generates them&lt;/em&gt;. Because these end products are created programmatically, code quality is still important! And we’re not talking about bikeshedding the indentation aesthetics or pedantic formatting standards — ultimately, data science code quality is about correctness and reproducibility.&lt;/p&gt;

  &lt;p&gt;It’s no secret that good analyses are often the result of very scattershot and serendipitous explorations. Tentative experiments and rapidly testing approaches that might not work out are all part of the process for getting to the good stuff, and there is no magic bullet to turn data exploration into a simple, linear progression.&lt;/p&gt;

  &lt;p&gt;That being said, once started it is not a process that lends itself to thinking carefully about the structure of your code or project layout, so it’s best to start with a clean, logical structure and stick to it throughout. We think it’s a pretty big win all around to use a fairly standardized setup like this one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that the template based approach is great. I have already modified the directory structure and some make files that I don’t see myself using initially. As the weeks pass and I refine my workflow, I’m sure that I will be modifying or creating new cookiecutters (you can have multiple templates that are called from the command line).&lt;/p&gt;

&lt;p&gt;I’m looking forward to my research workflow being refined over time and becoming more robust and efficient—hopefully the process described above is a good starting point.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="workflow" /><category term="yearofml" /><summary type="html">There are two categories of projects that I’ve collected: ML papers and tutorials/working examples. For both of these I want a consistent workflow that allows me to present summaries in an quick and efficient manner and to reference in the future.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry><entry><title type="html">A Year of Machine Learning, Neural Networks, and more</title><link href="https://www.cpdis.com/Year-of-Learning/" rel="alternate" type="text/html" title="A Year of Machine Learning, Neural Networks, and more" /><published>2018-01-01T14:38:50-06:00</published><updated>2018-01-01T14:38:50-06:00</updated><id>https://www.cpdis.com/Year-of-Learning</id><content type="html" xml:base="https://www.cpdis.com/Year-of-Learning/">&lt;p&gt;My goal this year, and with this project, is to read, replicate, and expand upon as many different papers, tutorials, and Github repositories as possible. Each week I plan on going through all the &lt;a href=&quot;https://github.com/cpdis/Experiments&quot;&gt;links&lt;/a&gt; and tabs I’ve collected over the months and posting whatever the results are here. In addition, I want to improve my writing skills and the only way to do that is by practice and repetition. Please forgive my writing the first few months, it will, it has to, get better.&lt;/p&gt;

&lt;p&gt;It’s relatively easy (🤓) to take online &lt;a href=&quot;https://www.udacity.com/course/intro-to-machine-learning--ud120&quot;&gt;classes&lt;/a&gt;, &lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;courses&lt;/a&gt;, and &lt;a href=&quot;https://www.udacity.com/course/self-driving-car-engineer-nanodegree--nd013&quot;&gt;nanodegrees&lt;/a&gt; but getting your hands dirty and working through problems on your own is where real learning begins. I’m very aware that I’m probably not going to be leading authority in the field of artificial intelligence (or even someone worth a &lt;a href=&quot;https://www.nytimes.com/2017/10/22/technology/artificial-intelligence-experts-salaries.html&quot;&gt;seven figure&lt;/a&gt; salary), that was a decision I should have made fifteen years ago. However, becoming proficient/efficient at implementing models and being up-to-date with the latest research is a huge step in the right direction.&lt;/p&gt;

&lt;p&gt;In this first week of January I’m going to try to nail down the workflow that I use to actually complete this project and to document what I learn. I have a local folder ready for any code or papers that need to be stored locally and a &lt;a href=&quot;http://www.amazon.com/dp/B075N1Z9LT/?tag=heismukamily-20&quot;&gt;NAS&lt;/a&gt; to store large datasets. Everything will be on Github for version control and to show/share my work (and so I can get more practice using Git). I’m going to be using my 2014 13” MacBook Pro for most of this project so there definitely won’t be any training time records set. In my &lt;a href=&quot;https://github.com/cpdis/P3_CarND_Behavioral_Cloning&quot;&gt;experience&lt;/a&gt;, though, simple models run quickly and long training times may incentive me to &lt;a href=&quot;https://navoshta.com/meet-fenton/&quot;&gt;upgrade my machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The pace at which deep learning and artificial intelligence advances are being made (no matter how specialized) is truly astounding. I, for one, welcome our new 🤖 overlords.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="machine learning" /><category term="deep learning" /><category term="artificial intelligence" /><category term="learning" /><summary type="html">My goal this year, and with this project, is to read, replicate, and expand upon as many different papers, tutorials, and Github repositories as possible. Each week I plan on going through all the links and tabs I’ve collected over the months and posting whatever the results are here. In addition, I want to improve my writing skills and the only way to do that is by practice and repetition. Please forgive my writing the first few months, it will, it has to, get better.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry><entry><title type="html">The Parable of the iPhone</title><link href="https://www.cpdis.com/The-Parable-of-the-iPhone/" rel="alternate" type="text/html" title="The Parable of the iPhone" /><published>2017-12-31T14:55:01-06:00</published><updated>2017-12-31T14:55:01-06:00</updated><id>https://www.cpdis.com/The-Parable-of-the-iPhone</id><content type="html" xml:base="https://www.cpdis.com/The-Parable-of-the-iPhone/">&lt;p&gt;A 15 year old girl was picking berries from a bush one day in ancient Rome. And so it happened right before her eyes that a strange and mysterious wormhole opened up and presented an iPhone 7 Plus. She gasped in shock at the incomprehensible sight that had materialized out of thin air right before her eyes.&lt;/p&gt;

&lt;p&gt;Was it a precious metal of some kind? Perhaps a gem or a stone. It didn’t look like anything she had ever seen before. Could it be an exotic plant of some kind? A strange animal? Perhaps an extremely advanced tool. She reached her hand out to touch it. But then thought better of it. She better get her sister to take a look at it as well.&lt;/p&gt;

&lt;p&gt;She called out. Her sister was nearby and immediately ran over.&lt;/p&gt;

&lt;p&gt;“Look at this!”, she said.&lt;/p&gt;

&lt;p&gt;Her sister’s face looked bewildered, “What is it?”&lt;/p&gt;

&lt;p&gt;“I don’t know, it just appeared.”&lt;/p&gt;

&lt;p&gt;The sister picked up the phone. She marveled at its simplicity with affection. The vibrant silver color and precise lines of its edges. The small foreign writing on the metallic back with an image engraved in the finest handiwork of an apple that had a bite taken out.&lt;/p&gt;

&lt;p&gt;“This is magnificent” she said as she touched a part of the object that had a small contusion in the otherwise perfectly smooth surface. When she touched it, a brilliant light shone from the face of the object, like magic.&lt;/p&gt;

&lt;p&gt;The girls were awestruck. They thought they had better show this to their mother.&lt;/p&gt;

&lt;p&gt;A few hours later, the iPhone 7 Plus was in the hands of a Roman centurion who was taking a slow-mo video of his own face when the object disappeared as suddenly as it had arrived.&lt;/p&gt;

&lt;p&gt;A similar thing happened in two other places at two other times. The wormhole had opened. The iPhone had appeared. Once in South America to a young man in a hunter gatherer society and once to a middle aged woman in Manila in 1968. The result of these three temporary appearances of the iPhone 7 Plus shook the cultures that the iPhone had presented itself to to the core. Each had named the events and the object in different ways.&lt;/p&gt;

&lt;p&gt;The Romans had interpreted the event as an act of Caesar to display his power. The phone ended up being named the Delustricus. They started a holiday to celebrate the gracious revelation their Lord had bestowed upon them.&lt;/p&gt;

&lt;p&gt;The South American hunter gatherers had named the object what can be translated roughly as Sun Jewel, they ended up worshipping the Sun Jewel as their prime deity. Sacrifice by fire was the deity’s choice of preferred worship.&lt;/p&gt;

&lt;p&gt;The Filipino’s that had encountered the phone had eventually come to the conclusion that the device was an alien machine of infinite power that they called the Nuckacot. It happened to appear on a Tuesday precisely while the woman who had discovered it was overcooking a pot of rice. The culture had developed a custom of overcooking rice on Tuesdays in order to appease the aliens and pray for the return of the mysterious and beautiful Nuckacot.&lt;/p&gt;

&lt;p&gt;You see, this is what human beings do when we don’t have words for something, we make up words for them. Even if the thing we are trying to talk about is not a thing, is beyond thingness, but an experience that transcends all of our language and conceptions. We still try to find words, we still try to make meaning and tell stories. And so we get religion with all of its different variations and forms and practices.&lt;/p&gt;

&lt;p&gt;Are all religions the same? No, of course not.&lt;/p&gt;

&lt;p&gt;Neither are all the explanations of the iPhone. They are actually quite different.&lt;/p&gt;

&lt;p&gt;But is the iPhone the same? Of course it is.&lt;/p&gt;</content><author><name>cpdis</name></author><category term="blog" /><category term="apple" /><category term="technology" /><category term="iphone" /><category term="religion" /><summary type="html">A 15 year old girl was picking berries from a bush one day in ancient Rome. And so it happened right before her eyes that a strange and mysterious wormhole opened up and presented an iPhone 7 Plus. She gasped in shock at the incomprehensible sight that had materialized out of thin air right before her eyes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.cpdis.com/assets/images/" /></entry></feed>